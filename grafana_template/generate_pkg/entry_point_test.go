package generate_pkg

import (
	"fmt"
	"golang_practice/grafana_template/entry"
	"golang_practice/grafana_template/model"
	"testing"
)

// Testing Grafana DashBoard URL: https://grafana.i.airpay.com/d/iqlByAX4k/alarm_kafka?editview=dashboard_json&orgId=1
// DashBoard can have panel statement, not worry to be overwritten, unless set panelExistForUpdate to true
// Currently Default Alarm Notification Channel is (AS-Alarm): https://grafana.i.airpay.com/alerting/notification/102/edit

func TestSample(t *testing.T) {
	var (
		userCustom           *model.UserCustomPanel
		templateRelativePath string
		panelExistForUpdate  bool
	)

	// TODO: Your DashBoard relative path json file
	templateRelativePath = ""

	// TODO : Define panel data
	userCustom = nil

	// TODO: If true will update the panel while the panel titleName same, otherwise ignore this panel create.
	panelExistForUpdate = true

	jsonData := entry.DashBoardWithPanelsByTemplateGeneration(userCustom, templateRelativePath, panelExistForUpdate)
	// Common Issue1: The dashboard has been changed by someone else
	// Grafana has checked the version field. when copy paste, make sure the version value same as the Grafana Dashboard version value to avoid this error
	fmt.Println(jsonData)
}

func TestDashBoardWithPanelsNotFormat(t *testing.T) {
	var (
		userCustom           *model.UserCustomPanel
		templateRelativePath string
		panelExistForUpdate  bool
	)

	panelExistForUpdate = true
	templateRelativePath = "./dashBoard_template.json"
	userCustom = &model.UserCustomPanel{
		GlobalDataSource: "AirPay TH",
		PanelList: []*model.UserEachPanel{
			{
				PanTitle:   "check alarm TH",
				DataSource: "AirPay TH",
				UserExpr: &model.UserExpr{
					Expr:   `sum(increase(merchant_server_custom_counter_event_total{scenes="sync_mss_trx", event="sync_mss_trx_success"}[1m]))`,
					Legend: "success",
				},
			},
			{
				PanTitle:   "check alarm VN",
				DataSource: "AirPay VN",
				UserExpr: &model.UserExpr{
					Expr:   `sum(increase(merchant_server_custom_counter_event_total{scenes="sync_mss_trx", event="sync_mss_trx_success"}[1m]))`,
					Legend: "success",
				},
			},
		},
	}

	jsonData := entry.DashBoardWithPanelsByTemplateGeneration(userCustom, templateRelativePath, panelExistForUpdate)
	fmt.Println(jsonData)
}

func TestDashBoardWithPanelsFormatAndAlarm(t *testing.T) {
	var (
		userCustom           *model.UserCustomPanel
		templateRelativePath string
		panelExistForUpdate  bool
	)

	panelExistForUpdate = true
	templateRelativePath = "./dashBoard_template.json"
	userCustom = &model.UserCustomPanel{
		GlobalDataSource: "AirPay TH",
		PanelList: []*model.UserEachPanel{
			{
				PanTitle:   "check alarm",
				DataSource: "AirPay VN",
				UserExpr: &model.UserExpr{
					// For each Expr, actually they have alias field ref_id, currently see use in Alarm
					// For simplify, here is autogenerated by code. Multi Expr will be named as single upper letter lexicographical order
					ExprFormat: `sum(increase(merchant_server_custom_counter_event_total{scenes="%s", event="%s"}[1m]))`,
					ExprFormatVar: [][]any{
						{
							"sync_mss_trx",
							"sync_mss_trx_success",
						},
						{
							"sync_mss_trx",
							"sync_mss_trx_failure",
						},
					},
					ExprLegendFormat: []string{
						"success",
						"failure",
					},
				},
				UserAlert: &model.UserAlert{
					Conditions: []model.Conditions{
						{
							Evaluator: model.Evaluator{
								Params: []float64{
									20,
								},
								Type: "gt",
							},
							Operator: model.Operator{
								Type: "and",
							},
							Query: model.Query{
								Params: []string{
									"A", // value Expr's refID
									"5m",
									"now",
								},
							},
							Reducer: model.Reducer{
								Params: []any{},
								Type:   "avg",
							},
							Type: "query",
						},
					},
					//ExecutionErrorState:   "",
					//For:                   "",
					//Frequency:             "",
					Message: "TH PromptPay BillPayment API - Error Rate larger than 5 % within 5 minute",
					Name:    "BillPayment Error Rate",
					//NoDataState:           "",
					//NotificationChannelID: "",
				},
				UserThresholds: &model.UserThresholds{
					OP:    "gt",
					Value: 50,
				},
			},
		},
	}

	jsonData := entry.DashBoardWithPanelsByTemplateGeneration(userCustom, templateRelativePath, panelExistForUpdate)
	fmt.Println(jsonData)
}

func TestDashBoardWithPanels(t *testing.T) {
	var (
		userCustom           *model.UserCustomPanel
		templateRelativePath string
		panelExistForUpdate  bool
	)

	panelExistForUpdate = true
	templateRelativePath = "./dashBoard_template.json"
	userCustom = &model.UserCustomPanel{
		GlobalDataSource: "AirPay TH",
		PanelList: []*model.UserEachPanel{
			{
				PanTitle:   "check alarm",
				DataSource: "AirPay VN",
				UserExpr: &model.UserExpr{
					//Expr:       "",
					ExprFormat: `sum(increase(merchant_server_custom_counter_event_total{scenes="%s", event="%s"}[1m]))`,
					ExprFormatVar: [][]any{
						{
							"sync_mss_trx",
							"sync_mss_trx_success",
						},
						{
							"sync_mss_trx",
							"sync_mss_trx_failure",
						},
					},
					//Legend: "success",
					ExprLegendFormat: []string{
						"success",
						"failure",
					},
				},
			},
		},
	}

	jsonData := entry.DashBoardWithPanelsByTemplateGeneration(userCustom, templateRelativePath, panelExistForUpdate)
	fmt.Println(jsonData)
}
